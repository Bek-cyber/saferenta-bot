from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram import F
from dotenv import load_dotenv
import asyncio
import logging
import os
import docx2txt
import fitz  # PyMuPDF
from fpdf import FPDF

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="check"),
        InlineKeyboardButton(text="üë®‚Äç‚öñÔ∏è –Æ—Ä–∏—Å—Ç", callback_data="lawyer")
    ],
    [
        InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")
    ]
])

# /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeRenta ‚Äî Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —É—Å–ª–æ–≤–∏–π\n"
        "‚Äî –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–∏—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "check")
async def button_check(callback: types.CallbackQuery):
    await callback.message.answer(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX.\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
    )
    await callback.answer()

@dp.callback_query(F.data == "lawyer")
async def button_lawyer(callback: types.CallbackQuery):
    await cmd_lawyer(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "rules")
async def button_rules(callback: types.CallbackQuery):
    await cmd_legal(callback.message)
    await callback.answer()

# /—é—Ä–∏—Å—Ç
@dp.message(Command("—é—Ä–∏—Å—Ç"))
async def cmd_lawyer(message: Message):
    await message.answer(
        "üë®‚Äç‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å\n\n"
        "–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã, —Ä–∞–∑–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —é—Ä–∏—Å—Ç—É.\n\n"
        "üìå –û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ:\n"
        "‚úî –û–ø—ã—Ç –±–æ–ª–µ–µ 8 –ª–µ—Ç –≤ —Å—Ñ–µ—Ä–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∏ –∂–∏–ª–∏—â–Ω–æ–≥–æ –ø—Ä–∞–≤–∞\n"
        "‚úî –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –∞—Ä–µ–Ω–¥—ã, —Å–ø–æ—Ä–∞–º–∏ –ø–æ –Ω–∞–π–º—É, –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "‚úî –ü–æ–¥—Ö–æ–¥ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤, –∑–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n\n"
        "üì© –ö–æ–Ω—Ç–∞–∫—Ç: @–∏–º—è_—Ç–µ–ª–µ–≥—Ä–∞–º_—é—Ä–∏—Å—Ç–∞\n\n"
        "‚ö†Ô∏è –£—Å–ª—É–≥–∏ —é—Ä–∏—Å—Ç–∞ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏."
    )

# /–ø—Ä–∞–≤–∏–ª–∞
@dp.message(Command("–ø—Ä–∞–≤–∏–ª–∞"))
async def cmd_legal(message: Message):
    await message.answer(
        "üìÑ –ü—Ä–∞–≤–∏–ª–∞ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å\n\n"
        "–î–∞–Ω–Ω—ã–π Telegram-–±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä–µ–∫—Ç–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.\n"
        "–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–≥–æ–≤–æ—Ä–∞."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.message(F.document)
async def handle_document(message: Message):
    document = message.document
    file_path = f"temp/{document.file_unique_id}_{document.file_name}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await bot.download(document)
    with open(file_path, "wb") as f:
        f.write(file.read())

    await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞...")

    extracted_text = ""
    if file_path.lower().endswith(".docx"):
        extracted_text = docx2txt.process(file_path)
    elif file_path.lower().endswith(".pdf"):
        with fitz.open(file_path) as doc:
            for page in doc:
                extracted_text += page.get_text()
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏–ª–∏ DOCX.")
        return

    await message.answer("üì° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (mock)...")

    result = (
        "üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):\n\n"
        "‚Äî –ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω –ø—Ä–∏ –ø–æ—Ä—á–µ –∏–º—É—â–µ—Å—Ç–≤–∞.\n"
        "‚Äî –ù–µ—Ç –ø—É–Ω–∫—Ç–∞ –æ —Å—Ä–æ–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–ª–æ–≥–∞.\n"
        "‚Äî –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.\n\n"
        "‚úÖ –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π."
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=12)
    for line in result.split("\n"):
        pdf.multi_cell(0, 10, line)
    pdf_path = file_path + "_analysis.pdf"
    pdf.output(pdf_path)

    await message.answer_document(FSInputFile(pdf_path), caption="üìé –í–∞—à PDF-–æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤")

# –ó–∞–ø—É—Å–∫
async def main():
    os.makedirs("temp", exist_ok=True)

    try:
        me = await bot.get_me()
        logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
        return

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
