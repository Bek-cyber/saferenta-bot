from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram import F
from dotenv import load_dotenv
import asyncio
import logging
import os
import docx2txt
import fitz  # PyMuPDF
import requests
from fpdf import FPDF
import openai
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "not_required")

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="check"),
        InlineKeyboardButton(text="üë®‚Äç‚öñÔ∏è –Æ—Ä–∏—Å—Ç", callback_data="lawyer")
    ],
    [
        InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")
    ],
    [
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    ]
])

def load_text(filename: str) -> str:
    with open(os.path.join("texts", filename), encoding="utf-8") as f:
        return f.read()
    
def load_prompt() -> str:
    return os.getenv("PROMPT_SYSTEM", "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

def analyze_with_openai(user_text: str) -> str:
    prompt = load_prompt()

    for attempt in range(3):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": user_text[:4000]}
                ]
            )
            return response["choices"][0]["message"]["content"]
        except openai.error.RateLimitError:
            wait_time = 2 ** attempt  # 1, 2, 4 —Å–µ–∫
            time.sleep(wait_time)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@dp.callback_query(F.data == "about")
async def button_about(callback: types.CallbackQuery):
    await callback.message.answer(load_text("about.txt"), reply_markup=main_keyboard)
    await callback.answer()

# /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        load_text("welcome.txt"),
        eply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "check")
async def button_check(callback: types.CallbackQuery):
    await callback.message.answer(
        load_text("upload_instruction.txt"),
        reply_markup=main_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "lawyer")
async def button_lawyer(callback: types.CallbackQuery):
    await cmd_lawyer(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "rules")
async def button_rules(callback: types.CallbackQuery):
    await cmd_legal(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "start")
async def button_restart(callback: types.CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()

# /—é—Ä–∏—Å—Ç
@dp.message(Command("—é—Ä–∏—Å—Ç"))
async def cmd_lawyer(message: Message):
    await message.answer(load_text("lawyer.txt"), reply_markup=main_keyboard)

# /–ø—Ä–∞–≤–∏–ª–∞
@dp.message(Command("–ø—Ä–∞–≤–∏–ª–∞"))
async def cmd_legal(message: Message):
    await message.answer(load_text("rules.txt"), reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.message(F.document)
async def handle_document(message: Message):
    document = message.document
    file_path = f"temp/{document.file_unique_id}_{document.file_name}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await bot.download(document)
    with open(file_path, "wb") as f:
        f.write(file.read())

    await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞...")

    extracted_text = ""
    if file_path.lower().endswith(".docx"):
        extracted_text = docx2txt.process(file_path)
    elif file_path.lower().endswith(".pdf"):
        with fitz.open(file_path) as doc:
            for page in doc:
                extracted_text += page.get_text()
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏–ª–∏ DOCX.")
        return

    await message.answer("üì° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ OpenAI AI...")

    try:
        result = analyze_with_deepseek(extracted_text)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    pdf.add_font("DejaVu", style="", fname="fonts/DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=12)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å
    for line in result.split("\n"):
        try:
            pdf.write(8, line + "\n")
        except Exception as e:
            pdf.write(8, "[–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç—Ä–æ–∫–∏]\n")

    pdf_path = file_path + "_analysis.pdf"
    pdf.output(pdf_path)

    await message.answer_document(FSInputFile(pdf_path), caption="üìé –í–∞—à PDF-–æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫
async def main():
    os.makedirs("temp", exist_ok=True)
    os.makedirs("texts", exist_ok=True)
    os.makedirs("fonts", exist_ok=True)

    try:
        me = await bot.get_me()
        logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
        return

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
